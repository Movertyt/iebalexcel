from flask import Flask, render_template, request, send_file, jsonify, url_for
import pandas as pd
import io
from datetime import datetime, timedelta
import logging
import gc
import os
from werkzeug.utils import secure_filename

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your-secret-key-here'
app.config['MAX_CONTENT_LENGTH'] = 20 * 1024 * 1024  # 20MB limit
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['ALLOWED_EXTENSIONS'] = {'xlsx', 'xls'}

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

# –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã pandas –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
pd.set_option('display.width', None)
pd.set_option('display.max_colwidth', None)

# –°—Ä–æ–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
expiration_days = {
    "–≤ –∑–∞–∫–∞–∑–µ": {
        "PTE": 0, "PTS": 0, "DJR": 0, "ASP": 0, "WIJ": 0, "PBI": 0, "CTS": 3, "SPM": 4,
        "WDC": 0, "WJR": 0, "AIP": 0, "SDW": 0, "SGP": 0, "GIS": 0, "RWP": 0, "SDU": 0,
        "UBG": 0, "ADS": 21, "RSP": 0, "RNR": 21, "SDO": 0, "WSR": 0, "RME": 0, "WSC": 0,
        "SDL": 0, "WPF": 0, "WPT": 0, "WPU": 0, "RND": 0, "WDV": 0, "TWR": 0, "RNP": 21,
        "WWE": 0, "SFP": 0, "NAP": 4, "UDG": 0, "SAS": 8, "MTT": 0, "AGM": 0, "TMM": 8,
        "SMS": 7, "SMC": 7, "SAP": 4, "SSI": 4, "APC": 4, "SPS": 4, "SHC": 4, "PSC": 4,
        "ASI": 4, "BAP": 0, "APG": 4, "WSF": 4, "WMI": 4, "FSF": 4, "PIS": 3, "USD": 3,
        "PSR": 3, "LGR": 1
    },
    "–±–µ–∑ –∑–∞–∫–∞–∑–∞": {
        "PTE": 60, "PTS": 38, "DJR": 38, "ASP": 25, "WIJ": 25, "PBI": 25, "CTS": 25,
        "SPM": 25, "WDC": 21, "WJR": 21, "AIP": 21, "SDW": 21, "SGP": 21, "GIS": 21,
        "RWP": 21, "SDU": 21, "UBG": 21, "ADS": 21, "RSP": 21, "RNR": 21, "SDO": 21,
        "WSR": 21, "RME": 21, "WSC": 21, "SDL": 21, "WPF": 21, "WPT": 21, "WPU": 21,
        "RND": 21, "WDV": 21, "TWR": 21, "RNP": 21, "WWE": 14, "SFP": 14, "NAP": 14,
        "UDG": 10, "SAS": 8, "MTT": 8, "AGM": 8, "TMM": 8, "SMS": 7, "SMC": 7, "SAP": 4,
        "SSI": 4, "APC": 4, "SPS": 4, "SHC": 4, "PSC": 4, "ASI": 4, "BAP": 4, "APG": 4,
        "WSF": 4, "WMI": 4, "FSF": 4, "PIS": 3, "USD": 3, "PSR": 3, "LGR": 1
    }
}

def allowed_file(filename):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª Excel"""
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template('index.html')

def calculate_days_until_expiration(create_date, status, order_type):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
        if isinstance(create_date, str):
            date_part = create_date.split()[0]
            formats_to_try = ['%Y-%m-%d', '%d.%m.%Y', '%Y.%m.%d', '%d/%m/%Y']
            parsed = False
            
            for fmt in formats_to_try:
                try:
                    create_date = datetime.strptime(date_part, fmt)
                    parsed = True
                    break
                except ValueError:
                    continue
            
            if not parsed:
                return 999
                
        elif isinstance(create_date, datetime):
            pass
        else:
            return 999
            
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
        status_clean = str(status).strip()
        expiration_days_count = expiration_days[order_type].get(status_clean, 0)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É —Å–ø–∏—Å–∞–Ω–∏—è
        expiration_date = create_date + timedelta(days=expiration_days_count)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å
        today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
        expiration_date = expiration_date.replace(hour=0, minute=0, second=0, microsecond=0)
        create_date = create_date.replace(hour=0, minute=0, second=0, microsecond=0)
        
        days_left = (expiration_date - today).days
        
        return days_left
        
    except Exception as e:
        return 999

def modify_names_for_sc(df):
    """–ó–∞–º–µ–Ω—è–µ—Ç –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ MX –¥–ª—è –°–¶"""
    if 'MX' not in df.columns or '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' not in df.columns:
        return df
    
    modified_count = 0
    
    for idx, row in df.iterrows():
        mx_value = str(row['MX'])
        current_name = str(row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'])
        
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ MX –¥–ª—è —Ç—Ä–µ—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        if '–í—ã—Ö–æ–¥ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –°–¶' in mx_value:
            df.at[idx, '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'] = mx_value
            modified_count += 1
        elif '–ö–æ—Ç–æ–≤—Å–∫_–ë—É—Ñ–µ—Ä' in mx_value:
            df.at[idx, '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'] = mx_value
            modified_count += 1
        elif '–ü—Ä–∏–Ω—è—Ç–æ –Ω–∞ –≤–æ—Ä–æ—Ç–∞' in mx_value:
            df.at[idx, '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'] = mx_value
            modified_count += 1
    
    print(f"‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –Ω–∞ MX –¥–ª—è –°–¶: {modified_count}")
    return df

def apply_mx_filters(df, processing_type):
    """–ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã MX —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    if 'MX' not in df.columns:
        return df
    
    # –û–±—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ –õ–Æ–ë–û–ú —Ä–µ–∂–∏–º–µ
    patterns_to_remove_always = [
        '–í—ã—Ö–æ–¥ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –°–¶ –ö–æ—Ç–æ–≤—Å–∫ –ö–°31'
    ]
    
    # –í—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ–º –í—ã—Ö–æ–¥ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –°–¶ –ö–æ—Ç–æ–≤—Å–∫ –ö–°31
    mask_always = df['MX'].astype(str).str.contains('|'.join(patterns_to_remove_always), na=False)
    removed_count = mask_always.sum()
    df = df[~mask_always]
    print(f"üìä –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—â–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: —É–¥–∞–ª–µ–Ω–æ {removed_count}, –æ—Å—Ç–∞–ª–æ—Å—å {len(df)} —Å—Ç—Ä–æ–∫")
    
    if processing_type == 'potok':
        # –ü–û–¢–û–ö - —É–¥–∞–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ MX
        patterns_to_remove_potok = [
            '–í—ã—Ö–æ–¥ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –°–¶',
            '–í—ã—Ö–æ–¥ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ü—Ä–µ–¥—Å–æ—Ä—Ç –°–¶', 
            '–ü—Ä–µ–¥—Å–æ—Ä—Ç –°–¶',
            '–°–¶ –ö–æ—Ç–æ–≤—Å–∫ –ö–ì–¢',
            '–ö–æ—Ç–æ–≤—Å–∫_–ë—É—Ñ–µ—Ä',
            '–ë—É—Ñ–µ—Ä –ü—Ä–µ–¥—Å–æ—Ä—Ç–∞ –°–¶',
            '–ü—Ä–∏–Ω—è—Ç–æ –Ω–∞ –≤–æ—Ä–æ—Ç–∞',
            '–£–ø–∞–∫–æ–≤–∫–∞ –ü–°–ë'
        ]
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ MX —Å–æ–¥–µ—Ä–∂–∏—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        mask = df['MX'].astype(str).str.contains('|'.join(patterns_to_remove_potok), na=False)
        removed_count = mask.sum()
        df = df[~mask]
        print(f"üìä –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ MX –¥–ª—è –ü–æ—Ç–æ–∫–∞: —É–¥–∞–ª–µ–Ω–æ {removed_count}, –æ—Å—Ç–∞–ª–æ—Å—å {len(df)} —Å—Ç—Ä–æ–∫")
        
    elif processing_type == 'sc':
        # –°–¶ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ú–•
        sc_patterns = [
            '–í—ã—Ö–æ–¥ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –°–¶',
            '–í—ã—Ö–æ–¥ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ü—Ä–µ–¥—Å–æ—Ä—Ç –°–¶', 
            '–ü—Ä–µ–¥—Å–æ—Ä—Ç –°–¶',
            '–°–¶ –ö–æ—Ç–æ–≤—Å–∫ –ö–ì–¢',
            '–°–¶ –ö–æ—Ç–æ–≤—Å–∫ –ö–°',
            '–ö–æ—Ç–æ–≤—Å–∫_–ë—É—Ñ–µ—Ä',
            '–ë—É—Ñ–µ—Ä –ü—Ä–µ–¥—Å–æ—Ä—Ç–∞ –°–¶',
            '–ü—Ä–∏–Ω—è—Ç–æ –Ω–∞ –≤–æ—Ä–æ—Ç–∞'
        ]
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        mask_keep = df['MX'].astype(str).str.contains('|'.join(sc_patterns), na=False)
        df_temp = df[mask_keep]
        
        # –¢–µ–ø–µ—Ä—å —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ö–æ—Ç–æ–≤—Å–∫_–ë—É—Ñ–µ—Ä: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å —Ü–∏—Ñ—Ä–∞–º–∏ –ø–æ—Å–ª–µ "–≤"
        def filter_kotovsk_buffer(mx_value):
            mx_str = str(mx_value)
            if '–ö–æ—Ç–æ–≤—Å–∫_–ë—É—Ñ–µ—Ä –≤' in mx_str:
                parts = mx_str.split('–ö–æ—Ç–æ–≤—Å–∫_–ë—É—Ñ–µ—Ä –≤')
                if len(parts) > 1:
                    after_in = parts[1].strip()
                    if any(char.isdigit() for char in after_in):
                        return True
                    else:
                        return False
            elif '–ö–æ—Ç–æ–≤—Å–∫_–ë—É—Ñ–µ—Ä' in mx_str and ' –≤ ' not in mx_str:
                return True
            return True
        
        mask_kotovsk = df_temp['MX'].apply(filter_kotovsk_buffer)
        df = df_temp[mask_kotovsk]
        
        removed_count = len(mask_keep) - len(df)
        print(f"üìä –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ MX –¥–ª—è –°–¶: —É–¥–∞–ª–µ–Ω–æ {removed_count}, –æ—Å—Ç–∞–ª–æ—Å—å {len(df)} —Å—Ç—Ä–æ–∫")
        
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –Ω–∞ MX –¥–ª—è –°–¶
        print("üéØ –ù–∞—á–∏–Ω–∞—é –∑–∞–º–µ–Ω—É –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –Ω–∞ MX –¥–ª—è –°–¶...")
        df = modify_names_for_sc(df)
    
    return df

def add_expiration_column(df, order_type):
    """–î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü '–û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è'"""
    if '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è' not in df.columns or '–¢–æ–≤–∞—Ä' not in df.columns:
        return df
    
    # –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
    original_df = df.copy()
    status_map = original_df.set_index('–¢–æ–≤–∞—Ä')['–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞'].to_dict()
    
    def calculate_expiration_info(row):
        try:
            create_date = row['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è']
            tovar = row['–¢–æ–≤–∞—Ä']
            
            # –ë–µ—Ä–µ–º —Å—Ç–∞—Ç—É—Å –ü–û –¢–æ–≤–∞—Ä (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä)
            status = status_map.get(tovar, '')
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
            if isinstance(create_date, str):
                datetime_formats = [
                    '%Y-%m-%d %H:%M:%S', '%Y-%m-%d %H:%M', '%d.%m.%Y %H:%M:%S', '%d.%m.%Y %H:%M',
                    '%Y.%m.%d %H:%M:%S', '%Y.%m.%d %H:%M', '%d/%m/%Y %H:%M:%S', '%d/%m/%Y %H:%M'
                ]
                
                parsed_with_time = False
                for fmt in datetime_formats:
                    try:
                        create_date = datetime.strptime(create_date, fmt)
                        parsed_with_time = True
                        break
                    except ValueError:
                        continue
                
                if not parsed_with_time:
                    date_part = create_date.split()[0]
                    date_formats = ['%Y-%m-%d', '%d.%m.%Y', '%Y.%m.%d', '%d/%m/%Y']
                    for fmt in date_formats:
                        try:
                            create_date = datetime.strptime(date_part, fmt)
                            break
                        except ValueError:
                            continue
                    else:
                        return "–û—à–∏–±–∫–∞ –¥–∞—Ç—ã"
                        
            elif isinstance(create_date, datetime):
                pass
            else:
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è
            expiration_days_count = expiration_days[order_type].get(str(status).strip(), 0)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É —Å–ø–∏—Å–∞–Ω–∏—è
            expiration_date = create_date + timedelta(days=expiration_days_count)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å
            time_left = expiration_date - datetime.now()
            days = time_left.days
            hours = time_left.seconds // 3600
            
            # –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if days < 0:
                result = f"–ü–†–û–°–†–û–ß–ï–ù–û ({abs(days)} –¥–Ω)"
            elif days == 0:
                if hours <= 0:
                    result = "–°–ü–ò–°–ê–ù–ò–ï"
                else:
                    result = f"–°–µ–≥–æ–¥–Ω—è ({hours} —á)"
            else:
                result = f"{days} –¥–Ω {hours} —á"
            
            return result
                
        except Exception as e:
            return "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü
    df['–û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è'] = df.apply(calculate_expiration_info, axis=1)
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü '–û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è'")
    
    return df

def sort_by_priority(df):
    """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É —Å–ø–∏—Å–∞–Ω–∏—è"""
    if '–û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è' not in df.columns:
        return df
    
    print("üéØ –ù–∞—á–∏–Ω–∞—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É —Å–ø–∏—Å–∞–Ω–∏—è...")
    
    def get_sort_priority(expiration_text):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
        if isinstance(expiration_text, str):
            if expiration_text.startswith('–ü–†–û–°–†–û–ß–ï–ù–û'):
                try:
                    days = int(expiration_text.split('(')[1].split('–¥–Ω')[0].strip())
                    return 100 - days
                except:
                    return 50
            elif expiration_text == "–°–ü–ò–°–ê–ù–ò–ï":
                return 200
            elif expiration_text.startswith('–°–µ–≥–æ–¥–Ω—è'):
                try:
                    if '(' in expiration_text:
                        hours = int(expiration_text.split('(')[1].split('—á')[0].strip())
                        return 300 + hours
                    else:
                        return 300
                except:
                    return 300
            elif '–¥–Ω' in expiration_text:
                try:
                    parts = expiration_text.split('–¥–Ω')
                    days = int(parts[0].strip())
                    if len(parts) > 1 and '—á' in parts[1]:
                        hours = int(parts[1].split('—á')[0].strip())
                    else:
                        hours = 0
                    return 1000 + days * 100 + hours
                except:
                    return 9999
        return 9999
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    df['_sort_priority'] = df['–û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è'].apply(get_sort_priority)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    df = df.sort_values('_sort_priority')
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü
    df = df.drop(columns=['_sort_priority'])
    
    print(f"‚úÖ –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç—Ä–æ–∫: {len(df)}")
    return df

def generate_summary(df, order_type, processing_type):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Å–≤–æ–¥–∫–∏"""
    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_products = len(df)
    
    # –ö–æ–ª-–≤–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –≥–æ—Ñ—Ä (–¥—É–±–ª–µ–π)
    if '–ì–æ—Ñ—Ä–∞' in df.columns:
        gofra_counts = df['–ì–æ—Ñ—Ä–∞'].value_counts()
        duplicate_gofras = len(gofra_counts[gofra_counts > 1])
    else:
        duplicate_gofras = 0
    
    # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
    total_cost = df['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum() if '–°—Ç–æ–∏–º–æ—Å—Ç—å' in df.columns else 0
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –°–¶
    if processing_type == 'sc' and '–û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è' in df.columns:
        # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        expired_mask = df['–û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è'].astype(str).str.startswith('–ü–†–û–°–†–û–ß–ï–ù–û')
        expired_count = expired_mask.sum()
        expired_cost = df[expired_mask]['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum() if expired_count > 0 else 0
        
        # –¢–æ–≤–∞—Ä—ã –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è
        today_mask = df['–û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è'].astype(str).str.startswith('–°–µ–≥–æ–¥–Ω—è')
        today_count = today_mask.sum()
        today_cost = df[today_mask]['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum() if today_count > 0 else 0
        
        # –¢–æ–≤–∞—Ä—ã –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –∑–∞ 1 –¥–µ–Ω—å
        one_day_mask = df['–û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è'].astype(str).str.contains('1 –¥–Ω')
        one_day_count = one_day_mask.sum()
        one_day_cost = df[one_day_mask]['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum() if one_day_count > 0 else 0
        
        # –¢–æ–≤–∞—Ä—ã –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –∑–∞ 2 –¥–Ω—è
        two_days_mask = df['–û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è'].astype(str).str.contains('2 –¥–Ω')
        two_days_count = two_days_mask.sum()
        two_days_cost = df[two_days_mask]['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum() if two_days_count > 0 else 0
        
        summary = f"""üìä <b>–°–í–û–î–ù–ê–Ø –ü–û –û–ë–†–ê–ë–û–¢–ê–ù–ù–û–ô –¢–ê–ë–õ–ò–¶–ï:</b><br><br>
üì¶ <b>–¢–∏–ø –∑–∞–∫–∞–∑–∞:</b> {order_type}<br>
üè≠ <b>–¢–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b> –°–¶<br><br>
üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b><br>
‚Ä¢ –ö–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products} —à—Ç<br>
‚Ä¢ –ö–æ–ª-–≤–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –≥–æ—Ñ—Ä: {duplicate_gofras} —à—Ç<br>
‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost:,.0f} —Ä—É–±<br><br>
‚è∞ <b>–°—Ä–æ–∫–∏ —Å–ø–∏—Å–∞–Ω–∏—è:</b><br>
‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {expired_count} —à—Ç - {expired_cost:,.0f} —Ä—É–±<br>
‚Ä¢ –°–ø–∏—Å–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è: {today_count} —à—Ç - {today_cost:,.0f} —Ä—É–±<br>
‚Ä¢ –°–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å: {one_day_count} —à—Ç - {one_day_cost:,.0f} —Ä—É–±<br>
‚Ä¢ –°–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 2 –¥–Ω—è: {two_days_count} —à—Ç - {two_days_cost:,.0f} —Ä—É–±"""
            
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–≤–æ–¥–∫–∞ –¥–ª—è –ü–æ—Ç–æ–∫–∞
        summary = f"""üìä <b>–°–í–û–î–ö–ê –ü–û –û–ë–†–ê–ë–û–¢–ê–ù–ù–û–ô –¢–ê–ë–õ–ò–¶–ï:</b><br><br>
üì¶ <b>–¢–∏–ø –∑–∞–∫–∞–∑–∞:</b> {order_type}<br>
üè≠ <b>–¢–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b> {'–°–¶' if processing_type == 'sc' else '–ü–æ—Ç–æ–∫'}<br><br>
üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b><br>
‚Ä¢ –ö–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products} —à—Ç<br>
‚Ä¢ –ö–æ–ª-–≤–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –≥–æ—Ñ—Ä: {duplicate_gofras} —à—Ç<br>
‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost:,.0f} —Ä—É–±<br>"""

    return summary

@app.route('/process', methods=['POST'])
def process_file():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        if 'file' not in request.files:
            return jsonify({'success': False, 'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'})
        
        file = request.files['file']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –∏–º–µ–µ—Ç –∏–º—è
        if file.filename == '':
            return jsonify({'success': False, 'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
        if not allowed_file(file.filename):
            return jsonify({'success': False, 'error': '–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã Excel (.xlsx, .xls)'})
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Ñ–æ—Ä–º—ã
        order_type = request.form.get('order_type', '–≤ –∑–∞–∫–∞–∑–µ')
        processing_type = request.form.get('processing_type', 'sc')
        
        print(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {file.filename}")
        print(f"üì¶ –¢–∏–ø –∑–∞–∫–∞–∑–∞: {order_type}")
        print(f"üè≠ –¢–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_type}")
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        df = pd.read_excel(
            file,
            engine='openpyxl',
            dtype={
                '–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞': 'category',
                '–ì–æ—Ñ—Ä–∞': 'string',
                '–¢–æ–≤–∞—Ä': 'string', 
                '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': 'string',
                'MX': 'string'
            }
        )
        
        print(f"‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω: {len(df)} —Å—Ç—Ä–æ–∫, {len(df.columns)} –∫–æ–ª–æ–Ω–æ–∫")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Å—Ä–æ–∫–∞–º
        if '–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞' in df.columns and '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è' in df.columns:
            filtered_rows = []
            
            for idx, row in df.iterrows():
                days_left = calculate_days_until_expiration(
                    row['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'], 
                    row['–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞'], 
                    order_type
                )
                if days_left <= 2:
                    filtered_rows.append(idx)
            
            df = df.loc[filtered_rows]
            print(f"üìä –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ä–æ–∫–∞–º: {len(df)} —Å—Ç—Ä–æ–∫")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é MX
        df = apply_mx_filters(df, processing_type)
        print(f"üìä –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ MX: {len(df)} —Å—Ç—Ä–æ–∫")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å—Ä–æ–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        if len(df) > 0:
            df = add_expiration_column(df, order_type)
            df = sort_by_priority(df)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Å—Ç–æ–ª–±—Ü—ã –æ—Å—Ç–∞–≤–∏—Ç—å –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        columns_to_keep = ['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', '–ì–æ—Ñ—Ä–∞', '–¢–æ–≤–∞—Ä', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–°—Ç–æ–∏–º–æ—Å—Ç—å', '–û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è']
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ DataFrame)
        existing_columns = [col for col in columns_to_keep if col in df.columns]
        df = df[existing_columns]
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, index=False)
        output.seek(0)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        filename = f"–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π_{secure_filename(file.filename)}"
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        
        with open(filepath, 'wb') as f:
            f.write(output.getvalue())
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
        summary_text = generate_summary(df, order_type, processing_type)
        
        return jsonify({
            'success': True,
            'summary': summary_text,
            'download_url': f'/download/{filename}',
            'filename': filename
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return jsonify({'success': False, 'error': f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}'})

@app.route('/download/<filename>')
def download_file(filename):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        return send_file(filepath, as_attachment=True, download_name=filename)
    except Exception as e:
        return jsonify({'success': False, 'error': f'–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {str(e)}'})

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
    print("üìù –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:5000")
    app.run(debug=True, host='0.0.0.0', port=5000)